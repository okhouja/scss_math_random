// @import "../../node_modules/bootstrap/scss/bootstrap.scss";

$items-count: 30; // corresponds to the number of divs in your HTML

// Define animation
@keyframes move {
  0% {
    transform: scaleX(0.5);
  }

  100% {
    transform: scaleX(1.4);
  }
}
@keyframes move {
  0% {
    transform: scaleY(0.5);
  }

  100% {
    transform: scaleY(1.4);
  }
}

// Mixin to use animation
@mixin add-move-animation($duration) {
  animation-name: move;
  animation-duration: $duration;
  animation-iteration-count: infinite;
  animation-direction: alternate;
  animation-timing-function: initial;
}

body {
  background-color: white;
  margin: 0;
}

.items-container {
  display: grid;
  grid-template-columns: repeat($items-count, 2fr);
  grid-template-rows: 2fr;
  height: 100vh;
  width: 100vw;
}

// For loop to randomize values for each div bar
@for $i from 1 through $items-count {
  .item:nth-child(#{$i}) {
    background: linear-gradient(
      to bottom right,
      lighten(black, random(40)),
      rgba(darken(lightblue, random(10)), 1)
    );
    // random() will return a number between 1-100 with no argument being passed to it, or when you pass in a single integer parameter to define the upper limit. random(20) will return a number between 1-20.
    height: random(60) + 10 + vh;
    width: random(5) + vw;

    border-radius: 0 0 ((random(50) + 10 + px)) ((random(50) + 10 + px));
    transform-origin: 0 0;

    @if (($i % 2) != 0) {
      border-radius: ((random(60) + 10 + px)) ((random(20) + 10 + px)) 0 0;
      background: linear-gradient(
        to top right,
        lighten(lightgreen, random(90)),
        rgba(darken(gray, random(10)), 1)
      );
    }
    // The lighten() function increases lightness by a fixed amount.
    // The darken() function decreases lightness by a fixed amount.
    @include add-move-animation(random(5) + 1 + s);
  }
}

.item:nth-child(odd) {
  align-self: end;
  transform-origin: 0 100%;
}
